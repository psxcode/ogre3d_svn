//
// Cg port of Yury Uralsky's metaball FX shader
//
// Authors: Simon Green and Yury Urlasky
// Email: sdkfeedback@nvidia.com
//
// Copyright (c) NVIDIA Corporation. All rights reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////

struct SampleData
{
	float4 Pos   : POSITION;
	float3 N     : TEXCOORD0;
	float2 Field : TEXCOORD1;
	float4 Color : COLOR0;
};

struct SurfaceVertex
{
	float4 Pos	: POSITION;
	float3 N	: TEXCOORD0;
};

uniform float3x3 WorldViewIT : state.matrix.modelview.invtrans;
uniform float4x4 WorldViewProj : state.matrix.mvp;

uniform int Num_Metaballs = 2;
uniform float4 Metaballs[] = {
	{ -0.5, 0, 0, 0.2 },
	{ 0.6, 0, 0, 0.1 },
};

// Size of the sampling grid
uniform int3 SizeMask = { 63, 63, 63 };
uniform int3 SizeShift = { 0, 6, 12 };

uniform float IsoValue = 1.0;

// Metaball function
// Returns metaball function value in .w and its gradient in .xyz

float4 Metaball(float3 Pos, float3 Center, float RadiusSq)
{
	float epsilon = 0.001;

	float3 Dist = Pos - Center;
	float InvDistSq = 1 / (dot(Dist, Dist) + epsilon);

	float4 o;
	o.xyz = -2 * RadiusSq * InvDistSq * InvDistSq * Dist;
	o.w = RadiusSq * InvDistSq;
	return o;
}

// Vertex shader
SampleData SampleFieldVS(int index : VERTEXID, float4 pos : POSITION)
{
	SampleData o;

	float3 Pos;
#if 1
	// Generate sampling point position based on its index
	Pos.x = float((index >> SizeShift.x) & SizeMask.x) / (SizeMask.x + 1);
	Pos.y = float((index >> SizeShift.y) & SizeMask.y) / (SizeMask.y + 1);
	Pos.z = float((index >> SizeShift.z) & SizeMask.z) / (SizeMask.z + 1);
	Pos = Pos*2 - 1;
#else
	// read position from vertex
	Pos = pos.xyz;
#endif

	// Sum up contributions from all metaballs
	float4 Field = 0;
	for (int i = 0; i<Num_Metaballs; i++)
		Field += Metaball(Pos, Metaballs[i].xyz, Metaballs[i].w);

	// Transform position and normals
	o.Pos = mul(WorldViewProj, float4(Pos, 1));
	o.N = mul(WorldViewIT, Field.xyz);	// we want normals in world space
	o.Field.x = Field.w;

	// Generate in-out flags
	o.Field.y = (Field.w < IsoValue) ? 1 : 0;

	o.Color = (Field*0.5+0.5) * (Field.w / 10.0);
	return o;
}

// sample field from 3D texture
SampleData SampleVolumeTexVS(int index : VERTEXID,
							 uniform sampler3D volumeTex : TEXUNIT1)
{
	SampleData o;

	// Generate sampling point position based on its index
	float3 Pos;
	Pos.x = float((index >> SizeShift.x) & SizeMask.x) / (SizeMask.x + 1);
	Pos.y = float((index >> SizeShift.y) & SizeMask.y) / (SizeMask.y + 1);
	Pos.z = float((index >> SizeShift.z) & SizeMask.z) / (SizeMask.z + 1);

	float4 Field = tex3D(volumeTex, Pos);

	Pos = Pos*2 - 1;

	// Transform position and normals 
	o.Pos = mul(WorldViewProj, float4(Pos, 1));

	o.Field.x = Field.x;
	// Generate in-out flags
	o.Field.y = (Field.x > IsoValue) ? 1 : 0;

	o.Color = o.Field.x;
	return o;
}

// procedural effects
float flame(sampler3D volumeTex,
			float3 p,
			float time,
			float noiseFreq = 0.1,
			float noiseAmp = 0.5,
			float3 timeScale = { 0, -0.1, 0.0 }
			)
{
	float h = p.y*0.5+0.5;
	float r = 0.7 - length(p.xz) * h;

	r += tex3D(volumeTex, p*noiseFreq + time*timeScale).x*noiseAmp*h;
	return r;
}

SampleData SampleProceduralVS(int index : VERTEXID,
							  uniform sampler3D volumeTex : TEXUNIT1,
							  uniform float time = 0.0)
{
	SampleData o;

	// Generate sampling point position based on its index
	float3 Pos;
	Pos.x = float((index >> SizeShift.x) & SizeMask.x) / (SizeMask.x + 1);
	Pos.y = float((index >> SizeShift.y) & SizeMask.y) / (SizeMask.y + 1);
	Pos.z = float((index >> SizeShift.z) & SizeMask.z) / (SizeMask.z + 1);

	Pos = Pos*2 - 1;

	float4 Field = flame(volumeTex, Pos, time);

	// Transform position and normals 
	o.Pos = mul(WorldViewProj, float4(Pos, 1));

	o.Field.x = Field.x;
	// Generate in-out flags
	o.Field.y = (Field.x > IsoValue) ? 1 : 0;

	o.Color = o.Field.x;
	return o;
}

// Estimate where isosurface intersects grid edge with endpoints v0, v1
void CalcIntersection(float4 Pos0,
					  float3 N0,
					  float2 Field0,
					  float4 Pos1,
					  float3 N1,
					  float2 Field1)
{
	float t = (IsoValue - Field0.x) / (Field1.x - Field0.x);
	float4 Pos = lerp(Pos0, Pos1, t);
	float3 N = lerp(N0, N1, t);
	emitVertex(Pos : POSITION, N : TEXCOORD0);
}

// Geometry shader
// input: line with adjacency (tetrahedron)
// outputs: zero, one or two triangles depending if isosurface intersects tetrahedron
LINE_ADJ
TRIANGLE_OUT
void TessellateTetrahedraGS(
	AttribArray<float4> Pos : POSITION,
	AttribArray<float3> N : TEXCOORD0,
	AttribArray<float2> Field : TEXCOORD1,
//	uniform isamplerRECT edgeTex : TEXUNIT0
	uniform samplerRECT edgeTex : TEXUNIT0
	)
{
	// construct index for this tetrahedron
	int index = (int(Field[0].y) << 3) |
				(int(Field[1].y) << 2) |
				(int(Field[2].y) << 1) |
				 int(Field[3].y);

	// don't bother if all vertices out or all vertices inside isosurface
	if (index > 0 && index < 15)
	{
		//int4 e0 = texRECTfetch(edgeTex, int4(index, 0, 0, 0));
		//int4 e1 = texRECTfetch(edgeTex, int4(index, 1, 0, 0));
		int4 e0 = texRECTfetch(edgeTex, int4(index, 0, 0, 0)) * 255;
		int4 e1 = texRECTfetch(edgeTex, int4(index, 1, 0, 0)) * 255;

		// Emit a triangle
		CalcIntersection(Pos[e0.x], N[e0.x], Field[e0.x], Pos[e0.y], N[e0.y], Field[e0.y]);
		CalcIntersection(Pos[e0.z], N[e0.z], Field[e0.z], Pos[e0.w], N[e0.w], Field[e0.w]);
		CalcIntersection(Pos[e1.x], N[e1.x], Field[e1.x], Pos[e1.y], N[e1.y], Field[e1.y]);

		// Emit additional triangle, if necessary
		if (e1.z != 0) {
			CalcIntersection(Pos[e1.z], N[e1.z], Field[e1.z], Pos[e1.w], N[e1.w], Field[e1.w]);
		}
	}
}

float4 CalcIntersection2(float4 Pos0,
					     float2 Field0,
					     float4 Pos1,
					     float2 Field1)
{
	float t = (IsoValue - Field0.x) / (Field1.x - Field0.x);
	return lerp(Pos0, Pos1, t);
}

// calculate triangle normal
float3 calcNormal(float3 v0, float3 v1, float3 v2)
{
    float3 edge0 = v1 - v0;
    float3 edge1 = v2 - v0;
    return normalize(cross(edge0, edge1));
}

// version that calculates triangle normals
LINE_ADJ
TRIANGLE_OUT
void TessellateTetrahedraNormGS(
	AttribArray<float4> Pos : POSITION,
	AttribArray<float2> Field : TEXCOORD1,
	uniform samplerRECT edgeTex : TEXUNIT0
	)
{
	// construct index for this tetrahedron
	int index = (int(Field[0].y) << 3) |
				(int(Field[1].y) << 2) |
				(int(Field[2].y) << 1) |
				 int(Field[3].y);

	// don't bother if all vertices out or all vertices in
	if (index > 0 && index < 15)
	{
		int4 e0 = texRECT(edgeTex, float2(index, 0)) * 255;
		int4 e1 = texRECT(edgeTex, float2(index, 1)) * 255;

		// Emit a triangle
		float4 p0 = CalcIntersection2(Pos[e0.x], Field[e0.x], Pos[e0.y], Field[e0.y]);
		float4 p1 = CalcIntersection2(Pos[e0.z], Field[e0.z], Pos[e0.w], Field[e0.w]);
		float4 p2 = CalcIntersection2(Pos[e1.x], Field[e1.x], Pos[e1.y], Field[e1.y]);
		float3 n = calcNormal(p2.xyz, p1.xyz, p0.xyz);
		emitVertex(p0 : POSITION, n : TEXCOORD0);
		emitVertex(p1 : POSITION, n : TEXCOORD0);
		emitVertex(p2 : POSITION, n : TEXCOORD0);

		// Emit additional triangle, if necessary
		if (e1.z != 0) {
			float4 p3 = CalcIntersection2(Pos[e1.z], Field[e1.z], Pos[e1.w], Field[e1.w]);
			float3 n = calcNormal(p1.xyz, p2.xyz, p3.xyz);
			emitVertex(p3 : POSITION, n : TEXCOORD0);
		}
	}
}

// Pixel shader
float4 MetaballPS(float3 N : TEXCOORD0,
			      uniform float3 L = { 0, 0, -1 }
			      ) : COLOR
{
	N = normalize(N);
//	return float4(N*0.5+0.5, 1);
    float3 materials[2] = { float3(1, 1, 1), float3(0, 0, 0.5)};
    float nDotL = dot( N, L);
	return float4(abs(nDotL) * materials[nDotL < 0.0], 0.1);
}
